# Prox E2E Test Configuration
# This configuration is for comprehensive E2E testing that creates and deletes test resources
# Note: Proxmox connection details are read from your existing prox configuration

# Test VM Details (will be created and deleted during testing)
export TEST_VM_NAME="e2e-test-vm"     # Name for VM that will be created
export TEST_VM_ID="9001"              # ID for VM that will be created (ensure this ID is available)
export SOURCE_VM_ID="100"             # ID of existing VM to clone from (must exist)

# Test Container Details (will be created and deleted during testing)  
export TEST_CT_NAME="e2e-test-ct"     # Name for container that will be created
export TEST_CT_ID="9002"              # ID for container that will be created (ensure this ID is available)

# Required: Template for container creation
# Can be specified in two formats:
# 1. Short format: os:version (e.g., ubuntu:22.04) - prox will auto-discover location
# 2. Full format: storage:vztmpl/template-name - specifies exact storage/node location
export TEST_TEMPLATE="ubuntu:24.04"   # Container template to use for creation

# Optional: Template host/node (where the container template is located)
# Note: If using short format template, prox will auto-discover template location
# If you need to specify exact storage, use full format in TEST_TEMPLATE instead
export TEMPLATE_NODE=""               # Node/storage where template is located (informational)

# Required: Source node for testing (where resources will be created)
export SOURCE_NODE="proxmox01"        # Node where test resources will be created

# Optional: Node name to run node-specific checks (prox node ls / prox node info)
# If empty, defaults to SOURCE_NODE
export NODE_NAME="proxmox01"

# Optional: Target node for migration tests (if different from source)
export TARGET_NODE="proxmox02"        # Target node for migration tests (leave empty to skip migration)

# Required: SSH Key for container creation tests
export TEST_SSH_KEY_FILE="$HOME/.ssh/id_rsa.pub"

# Test Options
export VERBOSE="false"
export DRY_RUN="false"
export SKIP_CLEANUP="false"           # Set to true to keep test resources for debugging

# Binary Path (relative to test script location)
export PROX_BINARY="../../bin/prox"

# Advanced / Feature Flags
# Optionally wait for VM IP assignment before considering it ready (may slow tests)
export WAIT_FOR_VM_IP="false"
# Enable retry logic for transient failures (recommended true in unstable environments)
export RETRY_TRANSIENT="true"
# Disable by default: create an extra throwaway container to test create/start/stop/delete separately
export ENABLE_EXTRA_CONTAINER_TESTS="false"
# Handle leftover resources from prior failed runs:
# If true, automatically delete existing TEST_VM_ID / TEST_CT_ID before starting
export AUTO_CLEAN_LEFTOVERS="false"
# If true, reuse existing TEST_VM_ID / TEST_CT_ID instead of recreating
export REUSE_LEFTOVERS="false"
# Automatically rebuild prox binary if Go sources are newer than existing binary
export AUTO_BUILD="true"

# Notes:
# - AUTO_CLEAN_LEFTOVERS and REUSE_LEFTOVERS are mutually exclusive; if both true, auto-clean wins.
# - You can also pass --auto-clean-leftovers or --reuse-leftovers flags to the script.
# - When neither flag is set and leftovers are detected, you'll be prompted interactively (if TTY).
# - Set AUTO_BUILD=false to skip staleness check & rebuild.

